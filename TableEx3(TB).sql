/*
    SQL BASIC
*/
-- Ex1) 학과 테이블에서 학과명과 계열 조회
SELECT  DEPARTMENT_NAME, CATEGORY FROM TB_DEPARTMENT;

SELECT DEPARTMENT_NAME || '의 정원은 ' || CAPACITY || '명 입니다.' AS "학과별 정원"
    FROM TB_DEPARTMENT
;

-- Ex2) 국어국문학과에 다니는 여학생 중 휴학중인 학생을 조회
SELECT * 
    FROM TB_STUDENT S, TB_DEPARTMENT D
    WHERE S.DEPARTMENT_NO = D.DEPARTMENT_NO
    AND DEPARTMENT_NAME = '국어국문학과'
    AND SUBSTR(STUDENT_SSN,8,1) IN (2,4) 
    AND ABSENCE_YN = 'Y'
;
SELECT STUDENT_NO, STUDENT_NAME, STUDENT_SSN
    FROM TB_STUDENT
    JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
    WHERE DEPARTMENT_NAME = '국어국문학과'
    AND SUBSTR(STUDENT_SSN,8,1) IN (2,4)
    AND ABSENCE_YN = 'Y'
;
    
-- Ex3) A513079, A513090, A513091, A513110, A513119
-- 이름을 순서대로 조회
SELECT STUDENT_NAME
FROM TB_STUDENT
WHERE STUDENT_NO IN ('A513079', 'A513090', 'A513091', 'A513110', 'A513119')
ORDER BY 1
;

-- Ex4) 총장의 이름을 조회
-- 총장을 제외한 모든 교슈들은 소속 학과를 가지고 있음.
SELECT PROFESSOR_NAME
FROM TB_PROFESSOR
--LEFT JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
WHERE DEPARTMENT_NO IS NULL
;
    
-- Ex5) 학과가 지정되지 않은 학생을 조회 ===========> 있어요? 없어요. 없어요?? 테이블에 없어요.
SELECT *
FROM TB_STUDENT
LEFT JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
WHERE DEPARTMENT_NO IS NULL
;
    
-- Ex6) 선수과목이 존재하는 과목의 과목번호를 조회   
SELECT DEPARTMENT_NO
FROM TB_CLASS
WHERE PREATTENDING_CLASS_NO IS NOT NULL ;
    
-- Ex7) 입학 정원이 20명 이상 30명 이하인 학과의 이름과 계열을 출력
SELECT DEPARTMENT_NAME , CATEGORY
FROM TB_DEPARTMENT
WHERE CAPACITY BETWEEN 20 AND 30;
--WHERE CAPACITY >= 20 CAPACITY <= 30;

-- Ex8) 학과 계열을 중복 제거 조회
SELECT DISTINCT CATEGORY FROM TB_DEPARTMENT ORDER BY 1;
SELECT CATEGORY FROM TB_DEPARTMENT GROUP BY CATEGORY ORDER BY 1;

-- Ex8)02학번 전주 거주자들의 모임 (휴학생을 제외)
SELECT STUDENT_NO, STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE STUDENT_ADDRESS LIKE '%전주%'
--AND EXTRACT(YEAR FROM ENTRANCE_DATE) = '2002';
AND TO_CHAR(ENTRANCE_DATE, 'YY') = '02'
AND ABSENCE_YN = 'N'
;

/*
    SELECT_FUNCTION 함수
*/
-- Ex1) 영문과 학생들의 학번, 이름, 입학년도를 조회
SELECT STUDENT_NO 학번, STUDENT_NAME 이름
    , TO_CHAR(ENTRANCE_DATE,'YYYY')||'년'
        || TO_CHAR(ENTRANCE_DATE,'MM')||'월'
            || TO_CHAR(ENTRANCE_DATE,'DD')||'일' 입학년도1
    , EXTRACT(YEAR FROM ENTRANCE_DATE)||'년'
        || EXTRACT(MONTH FROM ENTRANCE_DATE)||'월'
            || EXTRACT(DAY FROM ENTRANCE_DATE)||'일' 입학년도2
FROM TB_STUDENT
LEFT JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
WHERE DEPARTMENT_NAME = '영어영문학과'
ORDER BY 3
;
    
-- Ex2) 교수이름 중 이름이 3글자가 아닌 사람은?
SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR
--WHERE PROFESSOR_NAME NOT LIKE '___'
WHERE LENGTH(PROFESSOR_NAME)!= 3 
; 

-- Ex3) 남자교수들의 이름과 나이를 조회
-- 나이순서(내림차순)으로 정렬하되 나이가 같다면 이름순(오름차순)으로 정렬
SELECT PROFESSOR_NAME 이름 
        , TO_CHAR(SYSDATE,'YYYY') -
        (DECODE(SUBSTR(PROFESSOR_SSN,8,1), 1,19, 2,19, 3,20, 4,20 ,0)
        || SUBSTR(PROFESSOR_SSN,1,2)) || '세' AS 나이
FROM TB_PROFESSOR
    WHERE SUBSTR(PROFESSOR_SSN,8,1) IN (1,3)
ORDER BY 나이 DESC, 이름 
;
    
-- Ex4) 교수 이름 출력 (성을 제외)
SELECT PROFESSOR_NAME, SUBSTR(PROFESSOR_NAME,2) 
FROM TB_PROFESSOR
ORDER BY 1
;

-- Ex5) 2023년 크리스마스는 무슨 요일일까요?
SELECT TO_CHAR(TO_DATE(20231225),'DAY')
FROM DUAL;

-- Ex5) 2023년 애옹맨 생일은 무슨 요일일까요?
SELECT TO_CHAR(TO_DATE(20231228),'DAY')
FROM DUAL;

-- Ex6) 2000년대 이후 입학자들은 학번은 A로 시작한다.
-- 2000년대 전에 학번을 받은 사람들의 학번과 이름을 조회
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT 
WHERE STUDENT_NO NOT LIKE 'A%'
ORDER BY 1
;
    
-- Ex7) 학번이 A517178인 한아름 학생의 학점 총 평균점수를 구하기
--      우선 평점만 구해보기
SELECT ROUND(AVG(POINT),1) 평점
FROM TB_GRADE
WHERE STUDENT_NO = 'A517178';

--      학번과 이름을 함께 조회하기 위해서 그룹으로 묶는다.
--      WHERE로 필터링 하는 방법
SELECT STUDENT_NO 학번, STUDENT_NAME 이름, ROUND(AVG(POINT),1) 평점
FROM TB_STUDENT
JOIN TB_GRADE USING (STUDENT_NO)
GROUP BY STUDENT_NO, STUDENT_NAME
HAVING STUDENT_NO = 'A517178'
;
--      HAVING으로 필터링 하는 방법
SELECT STUDENT_NO 학번, STUDENT_NAME 이름, ROUND(AVG(POINT),1) 평점
FROM TB_STUDENT
JOIN TB_GRADE USING (STUDENT_NO)
WHERE STUDENT_NO = 'A517178'
GROUP BY STUDENT_NO, STUDENT_NAME
;

-- Ex8) 학과별 학생수를 구해서 학과번호, 학생수(명)을 조회
-- 학생수가 많은 순서대로 정렬
SELECT DEPARTMENT_NO 학과번호,  COUNT(*) 학생수
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY 2 DESC
;
SELECT DEPARTMENT_NO 학과번호, DEPARTMENT_NAME 학과명, COUNT(*) 학생수
FROM TB_STUDENT
RIGHT JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
GROUP BY DEPARTMENT_NO, DEPARTMENT_NAME
ORDER BY 1 DESC
;

SELECT COUNT(*)
FROM TB_DEPARTMENT;                        

-- Ex9) 지도교수를 배정받지 못한 학생은 몇 명?
SELECT COUNT(*)
FROM TB_STUDENT
WHERE COACH_PROFESSOR_NO IS NULL;
    
-- Ex10) 학번이 A112113인 김고운 학생의 년도별 평점
--      전체 평점 
SELECT ROUND(AVG(POINT),1) 
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'
;
--      학기별 평점
SELECT STUDENT_NO, TERM_NO, AVG(POINT)
FROM TB_GRADE
GROUP BY STUDENT_NO, TERM_NO
HAVING STUDENT_NO = 'A112113'
;
--     년도별 평점
SELECT STUDENT_NO, SUBSTR(TERM_NO,1,4), TRUNC(AVG(POINT),1)
FROM TB_GRADE
GROUP BY STUDENT_NO, SUBSTR(TERM_NO,1,4)
HAVING STUDENT_NO = 'A112113'
;
--      학번, 이름, 평점 함께 조회 : JOIN 사용
SELECT STUDENT_NO 학번, STUDENT_NAME 이름, SUBSTR(TERM_NO,1,4) 학기
        , ROUND(AVG(POINT),1) 평점1, TRUNC(AVG(POINT),1) 평점2
FROM TB_STUDENT
JOIN TB_GRADE USING (STUDENT_NO)
WHERE STUDENT_NO = 'A112113'
GROUP BY STUDENT_NO, STUDENT_NAME, SUBSTR(TERM_NO,1,4)
ORDER BY 학기
;    
--      학번, 이름, 평점 함께 조회 : 서브쿼리 사용    
SELECT STUDENT_NO 학번
        , (SELECT STUDENT_NAME
            FROM TB_STUDENT
            WHERE STUDENT_NO = TB_GRADE.STUDENT_NO ) 이름
        , SUBSTR(TERM_NO,1,4) 학기
        , ROUND(AVG(POINT),1) 평점1, TRUNC(AVG(POINT),1) 평점2
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'
GROUP BY STUDENT_NO, SUBSTR(TERM_NO,1,4)
ORDER BY 학기
;


    
    
    
    
    
    
    
    
    
    
    
    
    
    