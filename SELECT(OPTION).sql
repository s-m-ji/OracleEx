/*
    SELECT(OPTION)
*/
-- Ex1) 휴학중인 학생의 이름과 주민번호를 나이가 적은 순서대로 화면에 출력 
SELECT STUDENT_NAME 이름, STUDENT_SSN 주민번호
FROM TB_STUDENT
WHERE ABSENCE_YN = 'Y'
ORDER BY 2 DESC
;

-- Ex2) 주소지가 강원도나 경기도인 학생들 중 1900년대 학번을 가진 학생들의 이름과 학번, 주소를 이름의 오름차순으로 화면에 출력하시오.
-- 단, 출력헤더에는 "학생이름", "학번", "거주지 주소"가 출력되도록 한다.
SELECT STUDENT_NAME 이름, STUDENT_NO 학번, STUDENT_ADDRESS 주소
FROM TB_STUDENT 
--WHERE (STUDENT_ADDRESS LIKE '%강원도%' OR STUDENT_ADDRESS LIKE '%경기도%')  
WHERE STUDENT_ADDRESS LIKE '%강원도%' OR STUDENT_ADDRESS LIKE '%경기도%'
--WHERE REGEXP_LIKE (STUDENT_ADDRESS, '^강원|^경기') 
AND STUDENT_NO LIKE '9%'
ORDER BY 1 
;

-- Ex3)현재 법학과 교수 중 가장 나이가 많은 사람부터 이름을 확인할 수 있는 SQL 문장을 작성하시오.
-- (법학과의 '학과 코드'는 학과 테이블을 조회해서 찾아 내도록 하자)
SELECT PROFESSOR_NAME
FROM TB_PROFESSOR P, TB_DEPARTMENT D
WHERE P.DEPARTMENT_NO = D.DEPARTMENT_NO
AND D.DEPARTMENT_NAME = '법학과'
ORDER BY PROFESSOR_SSN
;
SELECT PROFESSOR_NAME 성함
        , TO_CHAR(SYSDATE,'YYYY') - ('19'||TO_CHAR(SUBSTR(PROFESSOR_SSN,1,2))) 연령
FROM TB_PROFESSOR
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
WHERE DEPARTMENT_NO = '005'
ORDER BY 2 DESC
;

-- Ex4) 2004년 2학기에 'C3118100' 과목을 수강한 학생들의 학점을 조회하려고 한다. 
-- 학점이 높은 학생부터 표시하고,
-- 학점이 같으면 학번이 낮은 학생부터 표시하는 구문을 작성해 보시오.
-- 워크북 결과와 동일하게 소수점 아래 2자리까지 0으로 표현하기 위해서 TO_CHAR(NUMBER, 'FM9.00') 포맷 사용

-- 9는 유효한 숫자만 표시하고 앞에 0이 오면 표시하지 않는다.
/*
    FM뒤의 숫자들의 의미
    9: 있으면 표기, 없으면 생략
    0: 없으면 0표기
    (ex: 0.1일 경우 FM9.9 로 하면 .1 로 나온고, FM0.9로 하면 0.1로 나온다)
         9990: 4자리 자연수를 의미
        .99 : 소수점 2자리까지 표기
*/
SELECT STUDENT_NO 학번, TO_CHAR(POINT, 'FM9.00') 학점   -- FM9.9 / FM0.9 아래와 같은 내용
FROM TB_GRADE
WHERE TERM_NO = '200402' AND CLASS_NO = 'C3118100'
ORDER BY 2 DESC, 1;

-- Ex5) 과목별 교수 이름을 찾으려고 한다. 과목 이름과 교수 이름을 출력하는 SQL문을 작성하시오.
SELECT CLASS_NAME 과목명, PROFESSOR_NAME 교수명 
FROM TB_CLASS
JOIN TB_PROFESSOR USING (DEPARTMENT_NO)
ORDER BY 1
;  -- TODO 건수가 다르니까 확인이 필요함..! 
-- => 결론: TB_DEPARTMENT 테이블과의 관계가 1:多이기 때문에 정확한 값이 아님.

SELECT * FROM TB_CLASS WHERE CLASS_NAME = '논문작성법연구';
-- 1개의 학과에 여러개의 과목이 포함
SELECT * FROM TB_CLASS WHERE DEPARTMENT_NO = '057';
SELECT * FROM TB_DEPARTMENT WHERE DEPARTMENT_NO = '057';
-- 1개의 학과에 여러명의 교수가 포함
SELECT * FROM TB_PROFESSOR WHERE DEPARTMENT_NO = '057';

SELECT * FROM TB_CLASS_PROFESSOR; --> CLASS_NO, PROFESSOR_NO
SELECT * FROM TB_CLASS;           --> CLASS_NO
SELECT * FROM TB_PROFESSOR;       --> PROFESSOR_NO

SELECT DEPARTMENT_NAME 학과명, CLASS_NAME 과목명, PROFESSOR_NAME 교수명, COUNT(*)
FROM TB_DEPARTMENT
JOIN TB_PROFESSOR USING (DEPARTMENT_NO)
JOIN TB_CLASS USING (DEPARTMENT_NO)
GROUP BY DEPARTMENT_NAME, CLASS_NAME, PROFESSOR_NAME
ORDER BY 3,2
;
SELECT (SELECT DEPARTMENT_NAME 
        FROM TB_DEPARTMENT D
        WHERE C.DEPARTMENT_NO = D.DEPARTMENT_NO) 학과명
        , CLASS_NAME 과목명, PROFESSOR_NAME 교수명
FROM TB_CLASS C, TB_PROFESSOR P
WHERE C.DEPARTMENT_NO = P.DEPARTMENT_NO
ORDER BY 3,2
;
SELECT CLASS_NAME 과목명, PROFESSOR_NAME 교수명
FROM TB_CLASS
JOIN TB_CLASS_PROFESSOR USING (CLASS_NO)
JOIN TB_PROFESSOR USING (PROFESSOR_NO)
ORDER BY 2,1
;  

-- Ex6) Ex5의 결과 중 '인문 사회' 계열에 속한 과목의 교수 이름을 찾으려고 한다.
-- 이에 해당하는 과목 이름과 교수 이름을 출력하는 SQL문을 작성하시오.
SELECT * FROM TB_DEPARTMENT;        --> DEPARTMENT_NO

SELECT CLASS_NAME 과목명, PROFESSOR_NAME 교수명
FROM TB_CLASS C, TB_PROFESSOR P, TB_DEPARTMENT D
WHERE C.DEPARTMENT_NO = P.DEPARTMENT_NO
AND P.DEPARTMENT_NO = D.DEPARTMENT_NO
AND CATEGORY = '인문사회'
ORDER BY 2,1
;
SELECT CLASS_NAME 과목명, PROFESSOR_NAME 교수명
FROM TB_CLASS
JOIN TB_CLASS_PROFESSOR USING (CLASS_NO)
JOIN TB_PROFESSOR P USING (PROFESSOR_NO)
JOIN TB_DEPARTMENT D ON (P.DEPARTMENT_NO = D.DEPARTMENT_NO)
--》TB_CLASS 테이블에도 DEPARTMENT_NO 컬럼이 있기 때문에 명시해줘야함
WHERE CATEGORY = '인문사회'
ORDER BY 2,1
; 

-- Ex7) '음악학과' 학생들의 평점을 구하려고 한다. 
-- 음악학과 학생들의 "학번", "학생 이름", "전체 평점"을 출력하는 SQL 문장을 작성하시오.
-- (단, 평점은 소수점 1자리까지만 반올림하여 표시한다.)
SELECT * FROM TB_GRADE;      --> STUDENT_NO
SELECT * FROM TB_STUDENT;    --> STUDENT_NO  DEPARTMENT_NO
SELECT * FROM TB_DEPARTMENT; --> DEPARTMENT_NO

SELECT S.STUDENT_NO "학번", S.STUDENT_NAME "학생 이름", ROUND(AVG(POINT),1) "전체 평점"
FROM TB_STUDENT S, TB_DEPARTMENT D, TB_GRADE G
WHERE S.DEPARTMENT_NO = D.DEPARTMENT_NO
AND S.STUDENT_NO = G.STUDENT_NO
AND D.DEPARTMENT_NAME = '음악학과'
GROUP BY S.STUDENT_NO, S.STUDENT_NAME
;
SELECT  STUDENT_NO 학번, STUDENT_NAME 학생이름, ROUND(AVG(POINT),1) 전체평점
FROM    TB_GRADE
JOIN    TB_STUDENT USING (STUDENT_NO)
JOIN    TB_DEPARTMENT USING (DEPARTMENT_NO)
WHERE   DEPARTMENT_NAME = '음악학과'
GROUP BY STUDENT_NO, STUDENT_NAME
;

-- Ex8) 학번이 A313047인 학생이 학교에 나오고 있지 않다. 지도 교수에게 내용을 전달하기 위한 
-- 학과 이름, 학생 이름과 지도 교수 이름이 필요하다.
SELECT * FROM TB_STUDENT;       --> DEPARTMENT_NO   COACH_PROFESSOR_NO
SELECT * FROM TB_DEPARTMENT;    --> DEPARTMENT_NO
SELECT * FROM TB_PROFESSOR;    --> PROFESSOR_NO

SELECT STUDENT_NAME, DEPARTMENT_NAME, COACH_PROFESSOR_NO, PROFESSOR_NAME, PROFESSOR_NO
FROM TB_STUDENT S
JOIN TB_DEPARTMENT D USING (DEPARTMENT_NO)
JOIN TB_PROFESSOR P ON (COACH_PROFESSOR_NO = PROFESSOR_NO)
WHERE STUDENT_NO = 'A313047'
;
SELECT STUDENT_NAME, DEPARTMENT_NAME, PROFESSOR_NAME
FROM TB_STUDENT S, TB_DEPARTMENT D, TB_PROFESSOR P
WHERE S.COACH_PROFESSOR_NO = P.PROFESSOR_NO
AND S.DEPARTMENT_NO = D.DEPARTMENT_NO
AND STUDENT_NO = 'A313047'
;

-- Ex9) 2007년도에 '인간관계론' 과목을 수강한 학생을 찾아 
-- 학생이름과 수강학기를 표시하는 SQL 문장을 작성하시오.
SELECT * FROM TB_STUDENT;   --> STUDENT_NO 
SELECT * FROM TB_GRADE;     --> STUDENT_NO     CLASS_NO
SELECT * FROM TB_CLASS;     -->                CLASS_NO

SELECT STUDENT_NAME, TERM_NO
FROM TB_STUDENT S, TB_CLASS C, TB_GRADE G
WHERE S.STUDENT_NO = G.STUDENT_NO
AND C.CLASS_NO = G.CLASS_NO
AND CLASS_NAME = '인간관계론'
AND TERM_NO LIKE '2007%'
;
SELECT STUDENT_NAME, TERM_NO
FROM TB_STUDENT
JOIN TB_GRADE USING (STUDENT_NO)
JOIN TB_CLASS USING (CLASS_NO)
WHERE CLASS_NAME = '인간관계론'
AND TERM_NO LIKE '2007%'
;

-- Ex10) 예체능 계열 과목 중 과목 담당교수를 한 명도 배정받지 못한 과목을 찾아 
-- 그 과목 이름과 학과 이름을 출력하는 SQL 문장을 작성하시오.
SELECT * FROM TB_CLASS;             --> CLASS_NO    DEPARTMENT_NO
SELECT * FROM TB_CLASS_PROFESSOR;   --> CLASS_NO   
SELECT * FROM TB_DEPARTMENT;        -->             DEPARTMENT_NO

SELECT CLASS_NAME, DEPARTMENT_NAME, CATEGORY, PROFESSOR_NO
FROM TB_CLASS
LEFT JOIN TB_CLASS_PROFESSOR USING(CLASS_NO)
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
WHERE CATEGORY = '예체능'
AND PROFESSOR_NO IS NULL
;
SELECT CLASS_NAME, DEPARTMENT_NAME, CATEGORY, PROFESSOR_NO
FROM TB_CLASS C, TB_CLASS_PROFESSOR CP, TB_DEPARTMENT D
WHERE C.CLASS_NO = CP.CLASS_NO(+)
AND C.DEPARTMENT_NO = D.DEPARTMENT_NO
AND CATEGORY = '예체능'
AND PROFESSOR_NO IS NULL
;

-- Ex11) 서반아어학과 학생들의 지도교수를 게시하고자 한다. 
-- 학생이름과 지도교수 이름을 찾고 만일 지도 교수가 없는 학생일 경우
-- "지도교수 미지정"으로 표시하도록 하는 SQL 문을 작성하시오. 
-- 단 출력헤더는 "학생이름", "지도교수"로 표시하며 고학번 학생이 먼저 표시되도록 한다.
SELECT STUDENT_NAME "학생이름", NVL(PROFESSOR_NAME, '지도교수 미지정') "지도교수", STUDENT_NO, STUDENT_SSN
FROM TB_STUDENT
LEFT JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
LEFT JOIN TB_PROFESSOR ON (COACH_PROFESSOR_NO = PROFESSOR_NO)
WHERE DEPARTMENT_NAME = '서반아어학과'
ORDER BY STUDENT_NO
;
SELECT STUDENT_NAME "학생이름", NVL(PROFESSOR_NAME, '지도교수 미지정') "지도교수"
FROM TB_STUDENT S, TB_DEPARTMENT D, TB_PROFESSOR P
WHERE S.DEPARTMENT_NO = D.DEPARTMENT_NO(+)
AND S.COACH_PROFESSOR_NO = P.PROFESSOR_NO(+)    
AND DEPARTMENT_NAME = '서반아어학과'
;

-- Ex12) 휴학생이 아닌 학생 중 평점이 4.0 이상인 학생을 찾아 
-- 그 학생의 학번, 이름, 학과, 이름, 평점을 출력하는 SQL문을 작성하시오.
-- * GROUP BY절에 사용된 컬럼만 SELECT절에 올 수 있다.
SELECT * FROM TB_STUDENT WHERE ABSENCE_YN = 'N';    --> STUDENT_NO   DEPARTMENT_NO
SELECT * FROM TB_GRADE;                             --> STUDENT_NO
SELECT * FROM TB_DEPARTMENT;                        -->              DEPARTMENT_NO

SELECT STUDENT_NO 학번, STUDENT_NAME 이름, DEPARTMENT_NAME 학과명, ROUND(AVG(POINT),1) 평점
FROM TB_STUDENT S
JOIN TB_GRADE G USING (STUDENT_NO)
JOIN TB_DEPARTMENT D USING (DEPARTMENT_NO)
WHERE ABSENCE_YN = 'N'
GROUP BY STUDENT_NO, STUDENT_NAME, DEPARTMENT_NAME
HAVING AVG(POINT) >= 4.0
;
-- 이건 학기별로 또 구해본 것
SELECT S.STUDENT_NO 학번, S.STUDENT_NAME 이름, D.DEPARTMENT_NAME 학과명, G.TERM_NO 학기, ROUND(AVG(POINT),1) 평점 
FROM TB_STUDENT S, TB_GRADE G, TB_DEPARTMENT D
WHERE S.STUDENT_NO = G.STUDENT_NO
AND S.DEPARTMENT_NO = D.DEPARTMENT_NO
AND ABSENCE_YN = 'N'
GROUP BY S.STUDENT_NO, S.STUDENT_NAME, D.DEPARTMENT_NAME, G.TERM_NO
HAVING AVG(POINT) >= 4.0
;

-- Ex13) 환경조경학과 전공과목들의 과목 별 평점을 파악할 수 있는 SQL 문을 작성하시오.
SELECT * FROM TB_DEPARTMENT WHERE DEPARTMENT_NAME = '환경조경학과';
--> DEPARTMENT_NO
SELECT * FROM TB_CLASS WHERE CLASS_TYPE LIKE '전공%';
--> DEPARTMENT_NO    CLASS_NO
SELECT * FROM TB_GRADE;
-->                  CLASS_NO
SELECT CLASS_TYPE, CLASS_NO, CLASS_NAME, ROUND(AVG(POINT),1) 평점
FROM TB_CLASS
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
JOIN TB_GRADE USING (CLASS_NO)
WHERE DEPARTMENT_NAME = '환경조경학과'
AND CLASS_TYPE LIKE '%전공%'
GROUP BY CLASS_TYPE, CLASS_NO, CLASS_NAME
; 
SELECT C.CLASS_TYPE, C.CLASS_NO, C.CLASS_NAME, ROUND(AVG(POINT),1) 평점
FROM TB_DEPARTMENT D, TB_CLASS C, TB_GRADE G
WHERE D.DEPARTMENT_NO = C.DEPARTMENT_NO
AND G.CLASS_NO = C.CLASS_NO
AND DEPARTMENT_NAME = '환경조경학과'
AND CLASS_TYPE LIKE '%전공%'
GROUP BY C.CLASS_TYPE, C.CLASS_NO, C.CLASS_NAME
;

-- Ex14) 최경희 학생과 같은 과 학생들의 이름과 주소를 출력하는 SQL 문을 작성하시오.
SELECT STUDENT_NAME 이름, NVL(STUDENT_ADDRESS,'집 없음???') 주소, DEPARTMENT_NAME 학과
FROM TB_STUDENT
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
WHERE DEPARTMENT_NAME = (SELECT DEPARTMENT_NAME
                        FROM TB_DEPARTMENT
                        JOIN TB_STUDENT USING (DEPARTMENT_NO)
                        WHERE STUDENT_NAME = '최경희')
;
SELECT STUDENT_NAME 이름, STUDENT_ADDRESS 주소
FROM TB_STUDENT
WHERE DEPARTMENT_NO = (SELECT DEPARTMENT_NO
                        FROM TB_STUDENT
                        WHERE STUDENT_NAME = '최경희')
;

-- Ex15) 국어국문학과에서 총점수가 가장 높은 학생의 이름과 학번을 표시하는 SQL문을 작성하시오
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
JOIN TB_GRADE USING (STUDENT_NO)
WHERE DEPARTMENT_NAME = '국어국문학과'
GROUP BY STUDENT_NO, STUDENT_NAME
HAVING SUM(POINT) = (
    SELECT MAX(SUM(POINT))       
    FROM TB_STUDENT
    JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
    JOIN TB_GRADE USING (STUDENT_NO)
    WHERE DEPARTMENT_NAME = '국어국문학과'
    GROUP BY STUDENT_NO, STUDENT_NAME)
;
SELECT S.STUDENT_NO, S.STUDENT_NAME
FROM TB_STUDENT S, TB_DEPARTMENT D, TB_GRADE G
WHERE S.DEPARTMENT_NO = D.DEPARTMENT_NO
AND S.STUDENT_NO = G.STUDENT_NO
AND D.DEPARTMENT_NAME = '국어국문학과'
GROUP BY S.STUDENT_NO, S.STUDENT_NAME
HAVING SUM(POINT) = (
    SELECT MAX(SUM(POINT))       
    FROM TB_STUDENT S, TB_DEPARTMENT D, TB_GRADE G
    WHERE S.DEPARTMENT_NO = D.DEPARTMENT_NO
    AND S.STUDENT_NO = G.STUDENT_NO
    AND D.DEPARTMENT_NAME = '국어국문학과'
    GROUP BY S.STUDENT_NO, S.STUDENT_NAME)
;













